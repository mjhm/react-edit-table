// Generated by CoffeeScript 1.10.0
(function() {
  var Component, DOM, EditingCell, NewRow, _, button, createFactory, form, ref, td, tr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('react'), Component = ref.Component, DOM = ref.DOM, createFactory = ref.createFactory;

  form = DOM.form, button = DOM.button, tr = DOM.tr, td = DOM.td;

  EditingCell = createFactory(require('./editing_cell'));

  _ = require('lodash');

  NewRow = (function(superClass) {
    extend(NewRow, superClass);

    function NewRow() {
      this.onSave = bind(this.onSave, this);
      var column, i, len, ref1;
      NewRow.__super__.constructor.apply(this, arguments);
      this.state = {
        values: {}
      };
      ref1 = this.props.columns;
      for (i = 0, len = ref1.length; i < len; i++) {
        column = ref1[i];
        this.state.values[column.key] = column.getInitialValue();
      }
    }

    NewRow.prototype.getOnChangeCallbackForCell = function(cellKey) {
      return (function(_this) {
        return function(newValue) {
          var obj;
          return _this.setState({
            values: _.assign({}, _this.state.values, (
              obj = {},
              obj["" + cellKey] = newValue,
              obj
            ))
          });
        };
      })(this);
    };

    NewRow.prototype.onSave = function() {
      var base;
      return typeof (base = this.props).onNew === "function" ? base.onNew(this.state.values) : void 0;
    };

    NewRow.prototype.render = function() {
      var column, key;
      return tr({}, (function() {
        var i, len, ref1, results;
        ref1 = this.props.columns;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          column = ref1[i];
          key = column.key;
          if (column.editableOnCreate) {
            results.push(EditingCell({
              column: column,
              key: key,
              focusOnCreate: false,
              onChange: this.getOnChangeCallbackForCell(key),
              onSubmit: this.onSave,
              value: this.state.values[key]
            }));
          } else {
            results.push(td({
              key: key
            }));
          }
        }
        return results;
      }).call(this), td({}, button({
        onClick: this.onSave
      }, 'Save')));
    };

    return NewRow;

  })(Component);

  module.exports = NewRow;

}).call(this);
