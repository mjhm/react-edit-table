// Generated by CoffeeScript 1.10.0
(function() {
  var Component, DOM, NewRow, Row, TBody, _, createFactory, ref, tbody,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('react'), DOM = ref.DOM, Component = ref.Component, createFactory = ref.createFactory;

  tbody = DOM.tbody;

  NewRow = createFactory(require('./new_row'));

  Row = createFactory(require('./row'));

  _ = require('lodash');

  TBody = (function(superClass) {
    extend(TBody, superClass);

    function TBody() {
      return TBody.__super__.constructor.apply(this, arguments);
    }

    TBody.prototype.getOnChangeCallbackForRow = function(rowIndex) {
      return (function(_this) {
        return function(columnName, newValue) {
          var base, obj;
          return typeof (base = _this.props).onChange === "function" ? base.onChange({
            index: rowIndex,
            key: columnName,
            row: _.assign({}, _this.props.data[rowIndex], (
              obj = {},
              obj["" + columnName] = newValue,
              obj
            )),
            value: newValue
          }) : void 0;
        };
      })(this);
    };

    TBody.prototype.render = function() {
      var rowData, rowIndex;
      return tbody({}, this.props.newRow ? NewRow({
        columns: this.props.columns,
        onNew: this.props.onNew
      }) : void 0, (function() {
        var i, len, ref1, results;
        ref1 = this.props.data;
        results = [];
        for (rowIndex = i = 0, len = ref1.length; i < len; rowIndex = ++i) {
          rowData = ref1[rowIndex];
          results.push(Row({
            actions: this.props.actions,
            columns: this.props.columns,
            data: rowData,
            key: rowIndex,
            onChange: this.getOnChangeCallbackForRow(rowIndex)
          }));
        }
        return results;
      }).call(this));
    };

    return TBody;

  })(Component);

  module.exports = TBody;

}).call(this);
