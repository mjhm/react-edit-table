// Generated by CoffeeScript 1.10.0
(function() {
  var Component, DOM, EditingCell, _, findDOMNode, form, input, option, ref, select, td,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('react'), Component = ref.Component, DOM = ref.DOM;

  findDOMNode = require('react-dom').findDOMNode;

  form = DOM.form, input = DOM.input, option = DOM.option, select = DOM.select, td = DOM.td;

  _ = require('lodash');

  EditingCell = (function(superClass) {
    extend(EditingCell, superClass);

    function EditingCell() {
      this.onSubmit = bind(this.onSubmit, this);
      this.onKeyDown = bind(this.onKeyDown, this);
      this.onChange = bind(this.onChange, this);
      this.onBlur = bind(this.onBlur, this);
      return EditingCell.__super__.constructor.apply(this, arguments);
    }

    EditingCell.prototype.componentDidMount = function() {
      var inputElement;
      if (!this.props.focusOnCreate) {
        return;
      }
      inputElement = findDOMNode(this.refs.editInput);
      inputElement.focus();
      if (!this.props.column.isSelect()) {
        return inputElement.select();
      }
    };

    EditingCell.prototype.onBlur = function() {
      var base;
      return typeof (base = this.props).onBlur === "function" ? base.onBlur() : void 0;
    };

    EditingCell.prototype.onChange = function(e) {
      var base, value;
      value = e.target.value;
      if (this.props.column.isSelect()) {
        value = this.selectIndexToValue(value);
      }
      value = this.props.column.mapValue(value);
      return typeof (base = this.props).onChange === "function" ? base.onChange(value) : void 0;
    };

    EditingCell.prototype.onKeyDown = function(e) {
      var base;
      if (e.key === 'Escape') {
        return typeof (base = this.props).onDiscard === "function" ? base.onDiscard() : void 0;
      }
    };

    EditingCell.prototype.onSubmit = function(e) {
      var base;
      e.preventDefault();
      return typeof (base = this.props).onSubmit === "function" ? base.onSubmit() : void 0;
    };

    EditingCell.prototype.selectIndexToValue = function(index) {
      return this.props.column.values[index];
    };

    EditingCell.prototype.selectValueToIndex = function(value) {
      var i, index, item, len, ref1;
      ref1 = this.props.column.values;
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        item = ref1[index];
        if (item === value) {
          return "" + index;
        }
      }
      return void 0;
    };

    EditingCell.prototype.render = function() {
      var index, optionName;
      return td({}, form({
        onSubmit: this.onSubmit
      }, this.props.column.isSelect() ? select({
        onBlur: this.onBlur,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        ref: 'editInput',
        value: this.selectValueToIndex(this.props.value)
      }, (function() {
        var i, len, ref1, results;
        ref1 = this.props.column.values;
        results = [];
        for (index = i = 0, len = ref1.length; i < len; index = ++i) {
          optionName = ref1[index];
          results.push(option({
            value: index,
            key: index
          }, "" + optionName));
        }
        return results;
      }).call(this)) : input({
        onBlur: this.onBlur,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        ref: 'editInput',
        value: this.props.value,
        style: {
          width: '100%'
        }
      })));
    };

    return EditingCell;

  })(Component);

  module.exports = EditingCell;

}).call(this);
