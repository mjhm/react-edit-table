// Generated by CoffeeScript 1.10.0
(function() {
  var Component, DOM, EditingCell, findDOMNode, input, option, ref, select, td,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('react'), Component = ref.Component, DOM = ref.DOM;

  findDOMNode = require('react-dom').findDOMNode;

  td = DOM.td, input = DOM.input, select = DOM.select, option = DOM.option;

  EditingCell = (function(superClass) {
    extend(EditingCell, superClass);

    function EditingCell() {
      this.onChange = bind(this.onChange, this);
      this.onBlur = bind(this.onBlur, this);
      EditingCell.__super__.constructor.apply(this, arguments);
      this.isSelect = this.props.column.values != null;
    }

    EditingCell.prototype.componentDidMount = function() {
      var inputElement;
      if (!this.props.focusOnCreate) {
        return;
      }
      inputElement = findDOMNode(this.refs.editInput);
      inputElement.focus();
      if (!this.isSelect) {
        return inputElement.select();
      }
    };

    EditingCell.prototype.onBlur = function() {
      var base;
      return typeof (base = this.props).onBlur === "function" ? base.onBlur() : void 0;
    };

    EditingCell.prototype.onChange = function(e) {
      var base, value;
      value = e.target.value;
      if (this.isSelect) {
        value = this.selectIndexToValue(value);
      }
      return typeof (base = this.props).onChange === "function" ? base.onChange(value) : void 0;
    };

    EditingCell.prototype.selectIndexToValue = function(index) {
      return this.props.column.values[index];
    };

    EditingCell.prototype.selectValueToIndex = function(value) {
      var i, index, item, len, ref1;
      ref1 = this.props.column.values;
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        item = ref1[index];
        if (item === value) {
          return "" + index;
        }
      }
      return void 0;
    };

    EditingCell.prototype.render = function() {
      var index, optionName;
      if (this.isSelect) {
        return td({}, select({
          value: this.selectValueToIndex(this.props.value),
          ref: 'editInput',
          onBlur: this.onBlur,
          onChange: this.onChange
        }, (function() {
          var i, len, ref1, results;
          ref1 = this.props.column.values;
          results = [];
          for (index = i = 0, len = ref1.length; i < len; index = ++i) {
            optionName = ref1[index];
            results.push(option({
              value: index,
              key: index
            }, "" + optionName));
          }
          return results;
        }).call(this)));
      } else {
        return td({}, input({
          onBlur: this.onBlur,
          onChange: this.onChange,
          ref: 'editInput',
          value: this.props.value,
          style: {
            width: '100%'
          }
        }));
      }
    };

    return EditingCell;

  })(Component);

  module.exports = EditingCell;

}).call(this);
