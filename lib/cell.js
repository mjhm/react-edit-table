// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Component, DOM, EditingCell, createFactory, ref, td,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('react'), Component = ref.Component, DOM = ref.DOM, createFactory = ref.createFactory;

  td = DOM.td;

  EditingCell = createFactory(require('./editing_cell'));

  Cell = (function(superClass) {
    extend(Cell, superClass);

    function Cell() {
      this.onChange = bind(this.onChange, this);
      this.onDoubleClick = bind(this.onDoubleClick, this);
      this.saveChanges = bind(this.saveChanges, this);
      this.discardChanges = bind(this.discardChanges, this);
      Cell.__super__.constructor.apply(this, arguments);
      this.state = {
        editing: false,
        editable: this.props.column.editable
      };
    }

    Cell.prototype.discardChanges = function() {
      return this.setState({
        editing: false
      });
    };

    Cell.prototype.saveChanges = function() {
      this.setState({
        editing: false
      });
      return this.props.onChange(this.state.editingValue);
    };

    Cell.prototype.onDoubleClick = function() {
      if (!this.state.editable) {
        return;
      }
      return this.setState({
        editing: true,
        editingValue: this.props.value
      });
    };

    Cell.prototype.onChange = function(value) {
      return this.setState({
        editingValue: value
      });
    };

    Cell.prototype.render = function() {
      if (this.state.editing) {
        return EditingCell({
          onChange: this.onChange,
          column: this.props.column,
          focusOnCreate: true,
          onBlur: this.saveChanges,
          onDiscard: this.discardChanges,
          onSubmit: this.saveChanges,
          value: this.state.editingValue
        });
      } else {
        return td({
          onDoubleClick: this.onDoubleClick
        }, "" + this.props.value);
      }
    };

    return Cell;

  })(Component);

  module.exports = Cell;

}).call(this);
