// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, DOM, EventComponent, findDOMNode, input, option, select, td,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventComponent = require('./event_component');

  DOM = require('react').DOM;

  findDOMNode = require('react-dom').findDOMNode;

  td = DOM.td, input = DOM.input, select = DOM.select, option = DOM.option;

  Cell = (function(superClass) {
    extend(Cell, superClass);

    function Cell() {
      this.onChange = bind(this.onChange, this);
      this.onDoubleClick = bind(this.onDoubleClick, this);
      this.onBlur = bind(this.onBlur, this);
      this.focusInput = bind(this.focusInput, this);
      var ref;
      Cell.__super__.constructor.apply(this, arguments);
      this.state = {
        editing: false,
        editable: (ref = this.props.column.editable) != null ? ref : true
      };
    }

    Cell.prototype.focusInput = function() {
      var inputElement;
      inputElement = findDOMNode(this.refs.editInput);
      inputElement.focus();
      if (!this.isSelect()) {
        return inputElement.select();
      }
    };

    Cell.prototype.isSelect = function() {
      return this.props.column.values != null;
    };

    Cell.prototype.onBlur = function() {
      this.setState({
        editing: false
      });
      return this.props.onChange(this.state.editingValue);
    };

    Cell.prototype.onDoubleClick = function() {
      if (!this.state.editable) {
        return;
      }
      this.once('componentDidUpdate', this.focusInput);
      return this.setState({
        editing: true,
        editingValue: this.props.value
      });
    };

    Cell.prototype.onChange = function(e) {
      var value;
      value = e.target.value;
      if (this.isSelect()) {
        value = this._selectIndexToValue(value);
      }
      return this.setState({
        editingValue: value
      });
    };

    Cell.prototype._selectValueToIndex = function(value) {
      var i, index, item, len, ref;
      ref = this.props.column.values;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if (item === value) {
          return "" + index;
        }
      }
      return void 0;
    };

    Cell.prototype._selectIndexToValue = function(index) {
      return this.props.column.values[index];
    };

    Cell.prototype.render = function() {
      var index, optionName;
      if (!this.state.editing) {
        return td({
          onDoubleClick: this.onDoubleClick,
          style: {
            whiteSpace: 'nowrap'
          }
        }, "" + this.props.value);
      }
      if (this.isSelect()) {
        return td({}, select({
          value: this._selectValueToIndex(this.state.editingValue),
          ref: 'editInput',
          onBlur: this.onBlur,
          onChange: this.onChange
        }, (function() {
          var i, len, ref, results;
          ref = this.props.column.values;
          results = [];
          for (index = i = 0, len = ref.length; i < len; index = ++i) {
            optionName = ref[index];
            results.push(option({
              value: index,
              key: index
            }, "" + optionName));
          }
          return results;
        }).call(this)));
      }
      return td({}, input({
        onBlur: this.onBlur,
        onChange: this.onChange,
        ref: 'editInput',
        value: this.state.editingValue,
        style: {
          width: '100%'
        }
      }));
    };

    return Cell;

  })(EventComponent);

  module.exports = Cell;

}).call(this);
